plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "dimdoors-common.mixins.json"
        mixinConfig "dimdoors.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:9.0.94"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    include "com.flowpowered:flow-math:1.0.3"
    include "org.jgrapht:jgrapht-core:1.1.0"
    include "com.github.DimensionalDevelopment:poly2tri.java:0.1.1"

    modApi "mcp.mobius.waila:wthit-api:forge-${wthitVersion}"
    modApi "mcp.mobius.waila:wthit:forge-${wthitVersion}"
    modApi "lol.bai:badpackets:forge-0.2.0"
    modApi "com.sk89q.worldedit:worldedit-forge-mc${rootProject.minecraft_version}:${rootProject.worldedit}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

    from(rootProject.file("common/src/main/resources")) {
        include("**/**")
        duplicatesStrategy = DuplicatesStrategy.WARN
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    project(":common").file("src/main/generated")
            ]
        }
    }
}