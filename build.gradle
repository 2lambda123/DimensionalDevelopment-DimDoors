plugins {
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'com.github.johnrengelman.shadow' version '8.1.+'
    id 'io.franzbecker.gradle-lombok' version '5.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

// Mod version
version = project.mod_version
group = project.maven_group
archivesBaseName = project.base_name

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(8))

// Configuration
minecraft {
    mappings channel: 'stable', version: mappings_version
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
    shadow.extendsFrom shade
}

repositories {
    google()
    mavenCentral()
    maven {
        name = 'JitPack'
        url = uri('https://jitpack.io')
    }
    maven {
        name = 'SonaType'
        url = uri('https://oss.sonatype.org/content/repositories/public/')
    }
    maven {
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
}


dependencies {
    //Minecraft
    minecraft("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")

    //Lombok
    annotationProcessor("org.projectlombok:lombok:${project.lombok_version}")

    //Shaded Libraries
    shade("com.flowpowered:flow-math:${project.flowmath_version}")
    shade("org.jgrapht:jgrapht-core:${project.jgrapht_version}")
    shade("com.github.DimensionalDevelopment:poly2tri.java:${project.poly2tri_version}")

    //Compile Only
    compileOnly("com.github.DimensionalDevelopment:AnnotatedNBT:${project.annotatednbt_version}")
    compileOnly("io.github.opencubicchunks:cubicchunks:${project.cubicchunks_version}")
    compileOnly("org.projectlombok:lombok:${project.lombok_version}")

    //Runtime Stuff
    runtimeOnly(fg.deobf("curse.maven:had-enough-items-557549:${project.hei_version}"))
    runtimeOnly(fg.deobf("curse.maven:the-one-probe-245211:${project.top_version}"))
}

shadowJar {
    //necessary relocation
    configurations = [project.configurations.shadow]
    setArchiveClassifier('')
    mergeServiceFiles()
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': minecraft_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes([
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.assemble.dependsOn('shadowJar')
tasks.shadowJar.dependsOn('reobfJar')
tasks.jar.finalizedBy('reobfJar')

tasks.register('generatePocketSchematics', JavaExec) {
    dependsOn jar
    classpath = files('build/libs/' + jar.archiveFileName)
    classpath += sourceSets.main.runtimeClasspath
    main = "org.dimdev.dimdoors.shared.tools.SchematicGenerator"
    args = ["src/main/resources/assets/dimdoors/pockets/schematic"]
}